trigger:
- '*'

pool:
    name: 'Azure Pipelines' # Replace Default with the name of your agent pool if you used a different pool

variables:
    buildConfiguration: 'Release'
    wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
    dotnetSdkVersion: '6.x'

# Build Job
steps:
-   task: UseDotNet@2
    displayName: 'Use .NET SDK $(dotnetSdkVersion)'
    inputs:
        packageType: sdk
        version: '$(dotnetSdkVersion)'

-   task: Npm@1
    displayName: 'Run npm install'
    inputs:
        verbose: false

-   script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
    displayName: 'Compile Sass assets'

-   task: gulp@1
    displayName: 'Run gulp tasks'

-   script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
    displayName: 'Write build info'
    workingDirectory: $(wwwrootDir)

-   task: DotNetCoreCLI@2
    displayName: 'Restore Project Dependencies'
    inputs:
        commamd: 'restore'
        projects: '**/*.csproj'

# Build the RELEASE configuration
-   task: DotNetCoreCLI@2
    displayName: 'Build the project - $(buildConfiguration)'
    inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

# Build the DEBUG configuration
-   task: DotNetCoreCLI@2
    displayName: 'Build the project - Debug'
    inputs:
        command: 'build'
        arguments: '--no-restore --configuration Debug'
        projects: '**/*.csproj'

# Publish or package the app's build RELEASE results (including its dependencies) into a folder
-   task: DotNetCoreCLI@2
    displayName: 'Publish the project - $(buildConfiguration)'
    inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/Release'
        zipAfterPublish: true

# Publish or package the app's build DEBUG results (including its dependencies) into a folder
- task: DotNetCoreCLI@2
  displayName: 'Publish the project - Debug'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Debug'
    zipAfterPublish: true

# Publish the .zip file to Azure Pipelines
-   task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    condition: succeeded()